service: serverless-todo-app

frameworkVersion: '^4.0.0'

plugins:
  - serverless-iam-roles-per-function

custom:
  stage: ${opt:stage, 'dev'}

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${self:custom.stage}
  region: us-east-1

  environment:
    TODOS_TABLE: todos-${self:custom.stage}
    ATTACHMENT_S3_BUCKET: todo-attachments-dev

  tracing:
    lambda: true
    apiGateway: true

build:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    target: node18
    format: cjs
    platform: node
    external:
      - aws-sdk

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
          - AttributeName: partitionKey
            AttributeType: S
          - AttributeName: sortKey
            AttributeType: S
        KeySchema:
          - AttributeName: partitionKey
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

functions:
  getTodos:
    handler: src/lambda/getTodos.handler
    tracing: Active
    events:
      - http:
          path: todos
          method: get
          cors:
            origin: 'http://localhost:3000'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
            methods:
              - OPTIONS
              - GET
              - POST
              - PATCH
              - DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}

  getTodo:
    handler: src/lambda/getTodo.handler
    tracing: Active
    events:
      - http:
          path: todos/{todoId}
          method: get
          cors:
            origin: 'http://localhost:3000'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
            methods:
              - OPTIONS
              - GET
              - POST
              - PATCH
              - DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}

  createTodo:
    handler: src/lambda/createTodo.handler
    tracing: Active
    events:
      - http:
          path: todos
          method: post
          cors:
            origin: 'http://localhost:3000'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
            methods:
              - OPTIONS
              - GET
              - POST
              - PATCH
              - DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}

  updateTodo:
    handler: src/lambda/updateTodo.handler
    tracing: Active
    events:
      - http:
          path: todos/{todoId}
          method: patch
          cors:
            origin: 'http://localhost:3000'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
            methods:
              - OPTIONS
              - GET
              - POST
              - PATCH
              - DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}

  deleteTodo:
    handler: src/lambda/deleteTodo.handler
    tracing: Active
    events:
      - http:
          path: todos/{todoId}
          method: delete
          cors:
            origin: 'http://localhost:3000'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
            methods:
              - OPTIONS
              - GET
              - POST
              - PATCH
              - DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem  # ✅ To verify existence
          - dynamodb:DeleteItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}

  generateUploadUrl:
    handler: src/lambda/generateUploadUrl.handler
    tracing: Active
    events:
      - http:
          path: todos/{todoId}/attachment
          method: post
          cors:
            origin: 'http://localhost:3000'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
            methods:
              - OPTIONS
              - GET
              - POST
              - PATCH
              - DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem  # ✅ Fixes AccessDenied for fetching todo
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:PutObjectAcl
        Resource:
          - arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
